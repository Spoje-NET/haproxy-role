#SPDX-License-Identifier: MIT-0
---
- name: Ensure HAProxy & Apache is installed.
  ansible.builtin.package:
    name: ['python3-zope.interface', 'haproxy', 'apache2', 'certbot-haproxy']
    update_cache: true
    state: present

- name: Ensure Certbot is installed
  ansible.builtin.package:
    name: certbot
    state: present

- name: Include nginx tasks
  ansible.builtin.include_tasks:
    file: nginx.yml

- name: Handle certificates first
  ansible.builtin.include_role:
    name: 'geerlingguy.certbot'

- name: Disable Apache Listen on port 80
  ansible.builtin.lineinfile:
    path: /etc/apache2/ports.conf
    state: absent
    line: Listen 80

- name: Enable Apache Listen on port 8080
  ansible.builtin.lineinfile:
    path: /etc/apache2/ports.conf
    state: present
    line: Listen 8080

- name: Update virtualhost for port 8080
  ansible.builtin.lineinfile:
    path: /etc/apache2/sites-available/000-default.conf
    regexp: '^<VirtualHost \*:80>'
    state: present
    line: '<VirtualHost *:8080>'
    firstmatch: true
  notify: Restart apache

- name: Prepare Fullchanins directory
  ansible.builtin.file:
    path: /etc/letsencrypt/haproxy_fullchains/
    state: directory
    mode: '0755'

- name: Ensure ssl haproxy directory
  ansible.builtin.file:
    path: haproxy
    state: directory
    mode: '0755'
    owner: haproxy
    group: haproxy

# # - name: Prepare fallback certificate
# #   ansible.builtin.copy:
# #     dest: /etc/letsencrypt/haproxy_fullchains/__fallback.pem
# #     src: /etc/letsencrypt/live/haproxy.pureosc.com/fullchain.pem
# #     mode: 0640
# #     remote_src: true

# - name: Prepare priveky for certificate
#   ansible.builtin.slurp:
#     src: /etc/letsencrypt/live/haproxy.pureosc.com/privkey.pem
#   register: privkey

# - name: Add Privkey to  fallback certificate
#   ansible.builtin.blockinfile:
#     path: /etc/letsencrypt/haproxy_fullchains/__fallback.pem
#     state: present
#     block: "{{ privkey['content'] | b64decode }}"

- name: Ensure HAProxy is enabled (so init script will start it on Debian).
  ansible.builtin.lineinfile:
    dest: /etc/default/haproxy
    regexp: "^ENABLED.+$"
    line: "ENABLED=1"
    state: present
  when: ansible_os_family == 'Debian'

- name: Get HAProxy version.
  ansible.builtin.command: haproxy -v
  register: haproxy_version_result
  changed_when: false
  check_mode: false

- name: Set HAProxy version.
  ansible.builtin.set_fact:
    haproxy_version: "{{ haproxy_version_result.stdout | regex_search('HAProxy version ([0-9.]+)', '\\1') | first }}"

- name: Copy configuration in place for HAProxy {{ haproxy_version }}
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    mode: '0644'
    # validate: haproxy -f %s -c -q
  notify: Restart haproxy

- name: Check certificate presence
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ item.name }}"
  with_items: "{{ haproxy_backend_servers }}"
  register: lineages

- name: "Request Certificates using 'certbot certonly --authenticator haproxy-authenticator    --installer haproxy-installer     --agree-tos     --email {{ certbot_admin_email }}     --non-interactive --domain {{ item.item.name }}'"
  ansible.builtin.command: >
    certbot certonly --authenticator haproxy-authenticator
    --installer haproxy-installer
    --agree-tos
    --email {{ certbot_admin_email }}
    --non-interactive --domain {{ item.item.name }}
  with_items:
    - "{{ lineages.results }}"
  when: not item.stat.exists
  args:
    creates: "/etc/letsencrypt/live/{{ item.item.name }}/fullchain.pem"
  register: certbot_requestresult
  ignore_errors: true

- name: Check if HAProxy SSL certificate exists
  ansible.builtin.stat:
    path: "/etc/haproxy/ssl/{{ item.name }}.pem"
  with_items: "{{ haproxy_backend_servers }}"
  register: ssl_certificates

- name: Deploy new certificates using haproxy-installer plugin
  ansible.builtin.command: >
    certbot certonly
    --authenticator haproxy-authenticator
    --installer haproxy-installer
    --agree-tos
    --email {{ certbot_admin_email }}
    --non-interactive
    --domain {{ item.item.name }}
  with_items: "{{ ssl_certificates.results }}"
  when: not item.stat.exists
  args:
    creates: "/etc/letsencrypt/live/{{ item.item.name }}/fullchain.pem"
  register: certbot_deploy_result
  ignore_errors: true

- name: Combine certificate and private key into a single PEM file
  ansible.builtin.shell: >
    cat /etc/letsencrypt/live/{{ item.name }}/privkey.pem
    /etc/letsencrypt/live/{{ item.name }}/fullchain.pem
    > /etc/haproxy/ssl/{{ item.name }}.pem
  with_items: "{{ haproxy_backend_servers }}"
  args:
    creates: "/etc/haproxy/ssl/{{ item.name }}.pem"
  register: combine_cert_result
  ignore_errors: false

- name: Debug Combine Certificate Output
  ansible.builtin.debug:
    msg: "{{ combine_cert_result.stdout_lines | default([]) + combine_cert_result.stderr_lines | default([]) }}"

- name: Set correct permissions for HAProxy SSL PEM files
  ansible.builtin.file:
    path: "/etc/haproxy/ssl/{{ item.name }}.pem"
    owner: haproxy
    group: haproxy
    mode: '0640'
  with_items: "{{ haproxy_backend_servers }}"

- name: Debug Certbot Deploy Output
  ansible.builtin.debug:
    msg: "{{ certbot_deploy_result.stdout_lines | default([]) + certbot_deploy_result.stderr_lines | default([]) }}"

- name: Debug Certbot Deploy Output
  ansible.builtin.debug:
    msg: "{{ certbot_deploy_result.stdout_lines | default([]) + certbot_deploy_result.stderr_lines | default([]) }}"

- name: Prepare Index page
  ansible.builtin.template:
    src: index.html.j2
    dest: /var/www/html/index.html
    mode: '0644'

- name: Ensure HAProxy is started and enabled on boot.
  ansible.builtin.service:
    name: haproxy
    # state: started
    enabled: true
  become: true

- name: Configure Rsyslog
  ansible.builtin.copy:
    dest: "/etc/rsyslog.d/99-haproxy.conf"
    mode: '0774'
    content: |
        $AddUnixListenSocket /var/lib/haproxy/dev/log
        :programname, startswith, "haproxy" {
        /var/log/haproxy.log
        stop
        }
  notify:
    - Restart rsyslog

- name: SystemD Letsencrypt Timer
  ansible.builtin.copy:
    dest: "/etc/systemd/system/letsencrypt.timer"
    mode: '0744'
    content: |
        [Unit]
        Description=Run Let's Encrypt every 12 hours
        [Timer]
        # Time to wait after booting before we run first time
        OnBootSec=2min
        # Time between running each consecutive time
        OnUnitActiveSec=12h
        Unit=letsencrypt.service
        [Install]
        WantedBy=timers.target

- name: SystemD Letsencrypt Service
  ansible.builtin.copy:
    dest: "/etc/systemd/system/letsencrypt.service"
    mode: '0744'
    content: |
        [Unit]
        Description=Renew Let's Encrypt Certificates
        [Service]
        Type=simple
        User=certbot
        ExecStart=/usr/bin/certbot renew -q --deploy-hook /usr/bin/certbot-haproxy-deploy

- name: Check existing certificates
  ansible.builtin.command: >
    certbot certificates
  register: certbot_certificates
  changed_when: false

- name: Debug existing certificates
  ansible.builtin.debug:
    msg: "{{ certbot_certificates.stdout_lines }}"

- name: Renew expired certificates
  ansible.builtin.command: >
    certbot renew --non-interactive --quiet --deploy-hook /usr/bin/certbot-haproxy-deploy
  register: certbot_renew_result
  changed_when: true
  ignore_errors: true

- name: Debug Certbot Renew Output
  ansible.builtin.debug:
    msg: "{{ certbot_renew_result.stdout_lines | default([]) + certbot_renew_result.stderr_lines | default([]) }}"

- name: Restart HAProxy after certificate renewal
  ansible.builtin.service:
    name: haproxy
    state: restarted
  when: certbot_renew_result is changed
  become: true

# - name: Restart HAProxy {{ haproxy_version }}
#   ansible.builtin.service:
#     name: haproxy
#     state: restarted
#   become: true

- name: Extract certificate names from certbot output
  ansible.builtin.command: certbot certificates
  register: certbot_certificates
  changed_when: false

- name: Parse certificate names from certbot output
  ansible.builtin.set_fact:
    certbot_cert_names: >-
      {{
        certbot_certificates.stdout
        | regex_findall('Certificate Name: ([^\n]+)')
      }}

- name: Extract valid certificate names from haproxy.yml
  ansible.builtin.set_fact:
    haproxy_cert_names: >-
      {{
        haproxy_backend_servers
        | map(attribute='name')
        | list
      }}

- name: Find certificates to remove
  ansible.builtin.set_fact:
    certs_to_remove: >-
      {{
        certbot_cert_names
        | difference(haproxy_cert_names)
      }}

- name: Debug certificates to remove
  ansible.builtin.debug:
    msg: "Certificates to remove: {{ certs_to_remove }}"

- name: Remove unused certificates
  ansible.builtin.file:
    path: "/etc/letsencrypt/live/{{ item }}"
    state: absent
  with_items: "{{ certs_to_remove }}"
  when: certs_to_remove | length > 0

- name: Remove unused archive directories
  ansible.builtin.file:
    path: "/etc/letsencrypt/archive/{{ item }}"
    state: absent
  with_items: "{{ certs_to_remove }}"
  when: certs_to_remove | length > 0

- name: Remove unused renewal configuration files
  ansible.builtin.file:
    path: "/etc/letsencrypt/renewal/{{ item }}.conf"
    state: absent
  with_items: "{{ certs_to_remove }}"
  when: certs_to_remove | length > 0
