# generated by ansible

global
  log /dev/log local0
  log /dev/log local1 notice
  stats socket /var/lib/haproxy/stats level admin
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon
  ssl-default-bind-ciphers AES128+AESGCM+EECDH+SHA256:AES128+EECDH:AES128+AESGCM+DHE:AES128+EDH:AES256+AESGCM+EECDH:AES256+EECDH:AES256+AESGCM+EDH:AES256+EDH:-SHA:AES128+AESGCM+EECDH+SHA256:AES128+EECDH:AES128+AESGCM+DHE:AES128+EDH:AES256+AESGCM+EECDH:AES256+EECDH:AES256+AESGCM+EDH:AES256+EDH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!3DES:!DSS
  ssl-default-bind-options no-sslv3 no-tls-tickets
  ssl-dh-param-file /etc/letsencrypt/dhparams.pem

defaults
  log global
  mode http
  option httplog
  option logasap
  option dontlognull
  timeout connect 5000
  timeout client 50000
  timeout server 50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

frontend http
    bind *:80
    acl is_ip hdr(host) -m reg ^\d{1,3}(\.\d{1,3}){3}(:\d+)?$
    # Redirect non-IP requests to HTTPS
    http-request redirect scheme https unless { ssl_fc } or is_ip
    # Route IP-based requests to the default backend
    use_backend default_backend if is_ip

frontend https
    bind *:443 ssl crt /etc/letsencrypt/haproxy_fullchains/__fallback.pem crt /etc/haproxy/ssl

    # Certbot verification
    acl is_certbot path_beg -i /.well-known/acme-challenge
    use_backend certbot if is_certbot

    # Handle all redirects before backend processing
{% for backend in haproxy_backend_servers %}
{% if backend.address.startswith('http') %}
    # Redirect to the specified address if it starts with a protocol
    acl is_{{ backend.name | replace('.', '_') }} hdr(host) -i {{ backend.name }}
    http-request redirect location {{ backend.address }} if is_{{ backend.name | replace('.', '_') }}
{% endif %}
{% endfor %}

    # Backend selection
{% for backend in haproxy_backend_servers %}
{% if not backend.address.startswith('http') %}
    acl is_{{ backend.name | replace('.', '_') }} hdr(host) -i {{ backend.name }}
    use_backend {{ backend.name | replace('.', '_') }} if is_{{ backend.name | replace('.', '_') }}
{% endif %}
{% endfor %}

    # Fallback to default backend for undefined domains
    default_backend default_backend

frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE

backend certbot
    log global
    mode http
    server certbot 127.0.0.1:8000

# Define backends for each host
{% for backend in haproxy_backend_servers %}
{% if not backend.address.startswith('http') %}
backend {{ backend.name | replace('.', '_') }}
    mode http
    balance roundrobin
    option forwardfor
    option httpchk GET /
    http-check send meth GET uri / ver HTTP/1.1 hdr Host {{ backend.name }}
    cookie SERVERID insert indirect
    server {{ backend.name | replace('.', '_') }} {{ backend.address }}{% if backend.ssl == true %} ssl verify none{% endif %} check
{% endif %}
{% endfor %}

backend default_backend
    mode http
    balance roundrobin
    option forwardfor
    # Forward requests to localhost:8080
    server local_service 127.0.0.1:8080 check
